#[TOP HEAD]

///
| Sample Code of FunCobal
| made by Haruka Sato(Takuya Matsunaga)
| of Supoijar.org/IntelligenceResearch
| named by Mr. Suwawa
| 24-4-2020
| lisenced with S-GLPL, but until completion of S-GLPL, apply MIT Licence instead of that.
///

#! environment specifier(optional,for developers)
#! gen1:*.fcb, gen2:*.fcbd, gen3:*.fc
@env : dev0,lint1.9.2,sdk0

#! Settle of package name.
@package "fun_cobal_sample";



#!  import of outer program files, with settle of unique namespace.
//with package name specifying.
@import "package:sample/sample.fcb" as sample1;
//with directory path specifying.
@import "./sample/sample.fcb" as sample2;


#!import of the core packages.
@depend "core:FC_Sample/Component";
@depend "core:ExtIO/FileIO";
@depend "core:Math/StdMath";

#! next two are include limiting of importing objects or modules.
#! each of module is a group of objects
#! two sources both of module and object
@depend "core:Net/StdNet" include <`module(GenLib), URI> as net;
#! a source of module
@depend "core:Net/WebHttpFw" include <`module(Server)> as whf;

#!import of core packages of family languages
@depend "fd:Docker";


#! Set up of link outer equipments and languages.
:net w/e.netlist.dock.nfc.q?Sony.PaSoRi (rw) as DockerF;
:impl "fd.Docker.nfc.felica" for DockerF;


#[END HEAD]



-- Object Oriented Programming.
Public::Class Nums {
    --- 属性
    #[kind Let]
    Either a
    Der b
    Dem c
    Int d
    Num e
    #[clr kind]
    --- 自動実装プロパティ
    Var::Double f (set,get)
    Const::Float g

    --- Type of Matrix.
    Let::Matrix mat <-  {}
    --- Generics.
    Let::Matrix<Int> mat2 <-  {}

    (*
    Polish Notation
    :(operator operand,operand,...)
    :(function parameter,...)
    Next example returns 11, as Number,has type of Int.
    :(+ 4,5,2)
    *)
    Let::Int polTest <- :(* 3,2,5)
    Let::Double polTest2 <- :(/ :(+ 5,2),4)
    :(= (Let::Int PolTest3),:(/ :(+ 5,2),4))


    (*
    Standard Settle of Delay same
    :# ms
    Next example settle 20ms delay.
    :# 20
    *)
    :# 8

    {-
    :~
    :|
    :^
    -}

    (* [flags] ReturnType funcName(args)[props]
    flags ... static, final, async, etc.
    props ... extends<name>, etc.
    *)
    Int static.final.getlen(Der im) {
        Let::Int i
        while() {

        }
        return i
    }
}

-- The Errors.
do {
    /* Something code that may occur Errors */
    throw Err --- throw Error
    raise Err -  or for this what alias of it
    throw SomeErr --- throw Error in type "SomeErr"
}
catch {
    --- Something code to do when occurred some Errors
}
catch (SomeErr e) {
    --- Something code to do when occurred Errors in type "SomeErr"
}
ensure {
    --- Something code to do in regardless of raise Errors
}
else {
    --- Something code to do when not occurred any Errors what written rescue code
}

-- Component Oriented Programming.
@component (
    export ComponentTestA
    public.Class PartA {
        --- contents
    }
    public.Class PartB {
        --- contents
    }
)
@component (
    export ComponentTestB
    im PartC{

    }
    @function(

        Axilin exr <- (input) {
           exp(s)
        }
    )
)

-- 外部デバイス(標準入出力除く)(ICカード読み取り/書き込み器など)の操作
@dare (
-- イベント駆動プログラミング
    Let::Stream dfs <- Docker.out.stream()
    Let::File ff <- FileIO
    core.put("Test felica event")
)

-- 関数型プログラミング
@function (
    Let::Int factor <- (Int n){
        if (n>0) {
            n * factor(n - 1)
        }
        else {
            1
        }
    }
)

-- 構造データの埋め込み・生成
@sdata [export:sample_bts] (
    ./mode="bigtable",file="sample.bts",src="./data/"
)
@sdata [export:web_test] (
    ./mode="html",file="index.html",src="./a.out/",lang="ja"
    .html=head..body
    .head=meta(charset="UTF-8")..title..link(rel="stylesheet",type="text/css",href="./style.css")
    .title=CDATA`[some site｜org-rs]
    .body=font(face="ＭＳ Ｐ明朝,ＭＳ 明朝,凸版文久明朝 R")
    .font=div:1(class="main")..div:2(class="sub")..div:3(div class="subst")..div:4(class="fotter")
    .div:1=nav1
    .nav:1=div:1_1(class="title")
    .div:1_1=a:1_1_1(href="./../path/path/some_p.html")
    .a:1_1_1=div

{-
    <!doctype html>
        <html lang="ja">

	<head>
		<meta charset="UTF-8">
		<title>some site｜org-rs</title>
		<link rel="stylesheet" type="text/css" href="./style.css">
	</head>
	<body><font face="ＭＳ Ｐ明朝,ＭＳ 明朝,凸版文久明朝 R">
		<div class="main">
			<nav>
				<div class="title">
					<a href="./../path/path/some_p.html">	
						<div class="name">org-name</div>
						<div class="belong">Socphesid; Special Office of Control and Prevention for High Emergency Specious Infectious Disease</div>
					</a>
				</div>
			</nav>
		</div>
		<div class="sub">
			<a href="./../index.html"><nav><div class="title">
			<div class="name"><span style="white-space: nowrap;">rel-n-some-1</span><span style="white-space: nowrap;">rel-n-some-2</span><span style="white-space: nowrap;">site</span></div><br>
			<div class="belong"><span style="white-space: nowrap;">Special Website for</span> <span style="white-space: nowrap;">Amid Coronaries Infectious Desease</span>; <span style="white-space: nowrap;">Covid-19 / SARS-CoV-2</span></div><br>
			</div></nav></a>
	site
		</div>
		<div class="subst">

		</div>

		<div class="fotter">
			<div class="copyright">@copyright 2020 by BSSfE & Takuya Matsunaga, all rights reserved.
			</div>
			<div class="contacts">
			<a href="https://twitter.com/BSSfE_Sch_ja"><img src="./system/images/twitter.svg" height="16"  /></a>
			　　<a href="./contact/index.html"><img src="./system/images/mail.png" height="15" width="18" /></a>
			</div>
		</div>
	</font></body>
</html>


-}
)


abstract Class AbsTest {
    public final void RunB()
}
public Class Test extends AbsTest {
    Void runB() {
        --- actual code
    }
}


@using Sub:fd (
    --- code written in fDocker(DSL of FunCobal,lang bind of Hardin Namespace)

)


Auto::Num input <- 2
@using Sub:fDocker.src:"./sampleFD.fd" [ {setState(input)},return for Auto::Boolean output]
-- fDocker source code file including
if (output) {

} else {

}


@using Sub:tex (
    --- code written in Texicon(DSL of FunCobal,lang bind of Hardin Namespace)

)


@using This:hjr (
    --- code written in Hjerbata(lang bind of Hardin Namespace)

)


@using Tolte:Chestnut (
    --- code written in Chestnut(lang bind of Tolte Namespace)

)

@using Google:Dart (
    --- code written in Dart(lang bind of Google Namespace)

)

@using Google:Go (
    --- code written in Go lang(lang bind of Google Namespace)

)



@using Sub: (
    --- code written in Texicon(DSL of FunCobal,lang bind of Hardin Namespace)

)

